{"ast":null,"code":"import { errorPrefix, inverseFactorNumerator, none, originPoint, squareExp } from \"./Constants.js\";\nimport { isNumber } from \"../../Utils/TypeUtils.js\";\nexport class Vector3d {\n  constructor(xOrCoords, y, z) {\n    this._updateFromAngle = (angle, length) => {\n      this.x = Math.cos(angle) * length;\n      this.y = Math.sin(angle) * length;\n    };\n    if (!isNumber(xOrCoords) && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      const coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : originPoint.z;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z ?? originPoint.z;\n    } else {\n      throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n    }\n  }\n  static get origin() {\n    return Vector3d.create(originPoint.x, originPoint.y, originPoint.z);\n  }\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n  set angle(angle) {\n    this._updateFromAngle(angle, this.length);\n  }\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n  set length(length) {\n    this._updateFromAngle(this.angle, length);\n  }\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n  add(v) {\n    return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n  copy() {\n    return Vector3d.clone(this);\n  }\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n    this.z /= n;\n  }\n  getLengthSq() {\n    return this.x ** squareExp + this.y ** squareExp;\n  }\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n    this.z *= n;\n  }\n  normalize() {\n    const length = this.length;\n    if (length != none) {\n      this.multTo(inverseFactorNumerator / length);\n    }\n  }\n  rotate(angle) {\n    return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), originPoint.z);\n  }\n  setTo(c) {\n    this.x = c.x;\n    this.y = c.y;\n    const v3d = c;\n    this.z = v3d.z ? v3d.z : originPoint.z;\n  }\n  sub(v) {\n    return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n}\nexport class Vector extends Vector3d {\n  constructor(xOrCoords, y) {\n    super(xOrCoords, y, originPoint.z);\n  }\n  static get origin() {\n    return Vector.create(originPoint.x, originPoint.y);\n  }\n  static clone(source) {\n    return Vector.create(source.x, source.y);\n  }\n  static create(x, y) {\n    return new Vector(x, y);\n  }\n}","map":{"version":3,"names":["errorPrefix","inverseFactorNumerator","none","originPoint","squareExp","isNumber","Vector3d","constructor","xOrCoords","y","z","_updateFromAngle","angle","length","x","Math","cos","sin","coords3d","undefined","Error","origin","create","atan2","sqrt","getLengthSq","clone","source","add","v","addTo","copy","distanceTo","sub","distanceToSq","div","n","divTo","mult","multTo","normalize","rotate","setTo","c","v3d","subFrom","Vector"],"sources":["D:/UNIMART-OVERSEAS/unimart/node_modules/@tsparticles/engine/browser/Core/Utils/Vectors.js"],"sourcesContent":["import { errorPrefix, inverseFactorNumerator, none, originPoint, squareExp } from \"./Constants.js\";\nimport { isNumber } from \"../../Utils/TypeUtils.js\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : originPoint.z;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? originPoint.z;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(originPoint.x, originPoint.y, originPoint.z);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** squareExp + this.y ** squareExp;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != none) {\n            this.multTo(inverseFactorNumerator / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), originPoint.z);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : originPoint.z;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\nexport class Vector extends Vector3d {\n    constructor(xOrCoords, y) {\n        super(xOrCoords, y, originPoint.z);\n    }\n    static get origin() {\n        return Vector.create(originPoint.x, originPoint.y);\n    }\n    static clone(source) {\n        return Vector.create(source.x, source.y);\n    }\n    static create(x, y) {\n        return new Vector(x, y);\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,sBAAsB,EAAEC,IAAI,EAAEC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAClG,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAO,MAAMC,QAAQ,CAAC;EAClBC,WAAWA,CAACC,SAAS,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACzB,IAAI,CAACC,gBAAgB,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvC,IAAI,CAACC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAC,GAAGC,MAAM;MACjC,IAAI,CAACJ,CAAC,GAAGM,IAAI,CAACE,GAAG,CAACL,KAAK,CAAC,GAAGC,MAAM;IACrC,CAAC;IACD,IAAI,CAACR,QAAQ,CAACG,SAAS,CAAC,IAAIA,SAAS,EAAE;MACnC,IAAI,CAACM,CAAC,GAAGN,SAAS,CAACM,CAAC;MACpB,IAAI,CAACL,CAAC,GAAGD,SAAS,CAACC,CAAC;MACpB,MAAMS,QAAQ,GAAGV,SAAS;MAC1B,IAAI,CAACE,CAAC,GAAGQ,QAAQ,CAACR,CAAC,GAAGQ,QAAQ,CAACR,CAAC,GAAGP,WAAW,CAACO,CAAC;IACpD,CAAC,MACI,IAAIF,SAAS,KAAKW,SAAS,IAAIV,CAAC,KAAKU,SAAS,EAAE;MACjD,IAAI,CAACL,CAAC,GAAGN,SAAS;MAClB,IAAI,CAACC,CAAC,GAAGA,CAAC;MACV,IAAI,CAACC,CAAC,GAAGA,CAAC,IAAIP,WAAW,CAACO,CAAC;IAC/B,CAAC,MACI;MACD,MAAM,IAAIU,KAAK,CAAC,GAAGpB,WAAW,qCAAqC,CAAC;IACxE;EACJ;EACA,WAAWqB,MAAMA,CAAA,EAAG;IAChB,OAAOf,QAAQ,CAACgB,MAAM,CAACnB,WAAW,CAACW,CAAC,EAAEX,WAAW,CAACM,CAAC,EAAEN,WAAW,CAACO,CAAC,CAAC;EACvE;EACA,IAAIE,KAAKA,CAAA,EAAG;IACR,OAAOG,IAAI,CAACQ,KAAK,CAAC,IAAI,CAACd,CAAC,EAAE,IAAI,CAACK,CAAC,CAAC;EACrC;EACA,IAAIF,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,CAACD,gBAAgB,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;EAC7C;EACA,IAAIA,MAAMA,CAAA,EAAG;IACT,OAAOE,IAAI,CAACS,IAAI,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;EACxC;EACA,IAAIZ,MAAMA,CAACA,MAAM,EAAE;IACf,IAAI,CAACF,gBAAgB,CAAC,IAAI,CAACC,KAAK,EAAEC,MAAM,CAAC;EAC7C;EACA,OAAOa,KAAKA,CAACC,MAAM,EAAE;IACjB,OAAOrB,QAAQ,CAACgB,MAAM,CAACK,MAAM,CAACb,CAAC,EAAEa,MAAM,CAAClB,CAAC,EAAEkB,MAAM,CAACjB,CAAC,CAAC;EACxD;EACA,OAAOY,MAAMA,CAACR,CAAC,EAAEL,CAAC,EAAEC,CAAC,EAAE;IACnB,OAAO,IAAIJ,QAAQ,CAACQ,CAAC,EAAEL,CAAC,EAAEC,CAAC,CAAC;EAChC;EACAkB,GAAGA,CAACC,CAAC,EAAE;IACH,OAAOvB,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACR,CAAC,GAAGe,CAAC,CAACf,CAAC,EAAE,IAAI,CAACL,CAAC,GAAGoB,CAAC,CAACpB,CAAC,EAAE,IAAI,CAACC,CAAC,GAAGmB,CAAC,CAACnB,CAAC,CAAC;EACpE;EACAoB,KAAKA,CAACD,CAAC,EAAE;IACL,IAAI,CAACf,CAAC,IAAIe,CAAC,CAACf,CAAC;IACb,IAAI,CAACL,CAAC,IAAIoB,CAAC,CAACpB,CAAC;IACb,IAAI,CAACC,CAAC,IAAImB,CAAC,CAACnB,CAAC;EACjB;EACAqB,IAAIA,CAAA,EAAG;IACH,OAAOzB,QAAQ,CAACoB,KAAK,CAAC,IAAI,CAAC;EAC/B;EACAM,UAAUA,CAACH,CAAC,EAAE;IACV,OAAO,IAAI,CAACI,GAAG,CAACJ,CAAC,CAAC,CAAChB,MAAM;EAC7B;EACAqB,YAAYA,CAACL,CAAC,EAAE;IACZ,OAAO,IAAI,CAACI,GAAG,CAACJ,CAAC,CAAC,CAACJ,WAAW,CAAC,CAAC;EACpC;EACAU,GAAGA,CAACC,CAAC,EAAE;IACH,OAAO9B,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACR,CAAC,GAAGsB,CAAC,EAAE,IAAI,CAAC3B,CAAC,GAAG2B,CAAC,EAAE,IAAI,CAAC1B,CAAC,GAAG0B,CAAC,CAAC;EAC9D;EACAC,KAAKA,CAACD,CAAC,EAAE;IACL,IAAI,CAACtB,CAAC,IAAIsB,CAAC;IACX,IAAI,CAAC3B,CAAC,IAAI2B,CAAC;IACX,IAAI,CAAC1B,CAAC,IAAI0B,CAAC;EACf;EACAX,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACX,CAAC,IAAIV,SAAS,GAAG,IAAI,CAACK,CAAC,IAAIL,SAAS;EACpD;EACAkC,IAAIA,CAACF,CAAC,EAAE;IACJ,OAAO9B,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACR,CAAC,GAAGsB,CAAC,EAAE,IAAI,CAAC3B,CAAC,GAAG2B,CAAC,EAAE,IAAI,CAAC1B,CAAC,GAAG0B,CAAC,CAAC;EAC9D;EACAG,MAAMA,CAACH,CAAC,EAAE;IACN,IAAI,CAACtB,CAAC,IAAIsB,CAAC;IACX,IAAI,CAAC3B,CAAC,IAAI2B,CAAC;IACX,IAAI,CAAC1B,CAAC,IAAI0B,CAAC;EACf;EACAI,SAASA,CAAA,EAAG;IACR,MAAM3B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAIA,MAAM,IAAIX,IAAI,EAAE;MAChB,IAAI,CAACqC,MAAM,CAACtC,sBAAsB,GAAGY,MAAM,CAAC;IAChD;EACJ;EACA4B,MAAMA,CAAC7B,KAAK,EAAE;IACV,OAAON,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACR,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAC,GAAG,IAAI,CAACH,CAAC,GAAGM,IAAI,CAACE,GAAG,CAACL,KAAK,CAAC,EAAE,IAAI,CAACE,CAAC,GAAGC,IAAI,CAACE,GAAG,CAACL,KAAK,CAAC,GAAG,IAAI,CAACH,CAAC,GAAGM,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAC,EAAET,WAAW,CAACO,CAAC,CAAC;EACnJ;EACAgC,KAAKA,CAACC,CAAC,EAAE;IACL,IAAI,CAAC7B,CAAC,GAAG6B,CAAC,CAAC7B,CAAC;IACZ,IAAI,CAACL,CAAC,GAAGkC,CAAC,CAAClC,CAAC;IACZ,MAAMmC,GAAG,GAAGD,CAAC;IACb,IAAI,CAACjC,CAAC,GAAGkC,GAAG,CAAClC,CAAC,GAAGkC,GAAG,CAAClC,CAAC,GAAGP,WAAW,CAACO,CAAC;EAC1C;EACAuB,GAAGA,CAACJ,CAAC,EAAE;IACH,OAAOvB,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACR,CAAC,GAAGe,CAAC,CAACf,CAAC,EAAE,IAAI,CAACL,CAAC,GAAGoB,CAAC,CAACpB,CAAC,EAAE,IAAI,CAACC,CAAC,GAAGmB,CAAC,CAACnB,CAAC,CAAC;EACpE;EACAmC,OAAOA,CAAChB,CAAC,EAAE;IACP,IAAI,CAACf,CAAC,IAAIe,CAAC,CAACf,CAAC;IACb,IAAI,CAACL,CAAC,IAAIoB,CAAC,CAACpB,CAAC;IACb,IAAI,CAACC,CAAC,IAAImB,CAAC,CAACnB,CAAC;EACjB;AACJ;AACA,OAAO,MAAMoC,MAAM,SAASxC,QAAQ,CAAC;EACjCC,WAAWA,CAACC,SAAS,EAAEC,CAAC,EAAE;IACtB,KAAK,CAACD,SAAS,EAAEC,CAAC,EAAEN,WAAW,CAACO,CAAC,CAAC;EACtC;EACA,WAAWW,MAAMA,CAAA,EAAG;IAChB,OAAOyB,MAAM,CAACxB,MAAM,CAACnB,WAAW,CAACW,CAAC,EAAEX,WAAW,CAACM,CAAC,CAAC;EACtD;EACA,OAAOiB,KAAKA,CAACC,MAAM,EAAE;IACjB,OAAOmB,MAAM,CAACxB,MAAM,CAACK,MAAM,CAACb,CAAC,EAAEa,MAAM,CAAClB,CAAC,CAAC;EAC5C;EACA,OAAOa,MAAMA,CAACR,CAAC,EAAEL,CAAC,EAAE;IAChB,OAAO,IAAIqC,MAAM,CAAChC,CAAC,EAAEL,CAAC,CAAC;EAC3B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue } from \"./NumberUtils.js\";\nimport { decayOffset, defaultLoops, defaultOpacity, defaultRgbMin, defaultTime, defaultVelocity, double, hMax, hMin, hPhase, half, identity, lMax, lMin, midColorValue, millisecondsToSeconds, percentDenominator, phaseNumerator, randomColorValue, rgbFactor, rgbMax, sMax, sMin, sNormalizedOffset, sextuple, triple } from \"../Core/Utils/Constants.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nfunction stringToRgba(engine, input) {\n  if (!input) {\n    return;\n  }\n  for (const manager of engine.colorManagers.values()) {\n    if (input.startsWith(manager.stringPrefix)) {\n      return manager.parseString(input);\n    }\n  }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return colorToRgb(engine, color.value, index, useIndex);\n  }\n  if (isArray(color.value)) {\n    return rangeColorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleRangeColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n  }\n  if (isArray(color.value)) {\n    return colorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n  const rgb = colorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n  const rgb = rangeColorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n  const r1 = color.r / rgbMax,\n    g1 = color.g / rgbMax,\n    b1 = color.b / rgbMax,\n    max = Math.max(r1, g1, b1),\n    min = Math.min(r1, g1, b1),\n    res = {\n      h: hMin,\n      l: (max + min) * half,\n      s: sMin\n    };\n  if (max !== min) {\n    res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n    res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min);\n  }\n  res.l *= lMax;\n  res.s *= sMax;\n  res.h *= hPhase;\n  if (res.h < hMin) {\n    res.h += hMax;\n  }\n  if (res.h >= hMax) {\n    res.h -= hMax;\n  }\n  return res;\n}\nexport function stringToAlpha(engine, input) {\n  return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n  return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n  const h = (hsl.h % hMax + hMax) % hMax,\n    s = Math.max(sMin, Math.min(sMax, hsl.s)),\n    l = Math.max(lMin, Math.min(lMax, hsl.l)),\n    hNormalized = h / hMax,\n    sNormalized = s / sMax,\n    lNormalized = l / lMax;\n  if (s === sMin) {\n    const grayscaleValue = Math.round(lNormalized * rgbFactor);\n    return {\n      r: grayscaleValue,\n      g: grayscaleValue,\n      b: grayscaleValue\n    };\n  }\n  const channel = (temp1, temp2, temp3) => {\n      const temp3Min = 0,\n        temp3Max = 1;\n      if (temp3 < temp3Min) {\n        temp3++;\n      }\n      if (temp3 > temp3Max) {\n        temp3--;\n      }\n      if (temp3 * sextuple < temp3Max) {\n        return temp1 + (temp2 - temp1) * sextuple * temp3;\n      }\n      if (temp3 * double < temp3Max) {\n        return temp2;\n      }\n      if (temp3 * triple < temp3Max * double) {\n        const temp3Offset = double / triple;\n        return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n      }\n      return temp1;\n    },\n    temp1 = lNormalized < half ? lNormalized * (sNormalizedOffset + sNormalized) : lNormalized + sNormalized - lNormalized * sNormalized,\n    temp2 = double * lNormalized - temp1,\n    phaseThird = phaseNumerator / triple,\n    red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)),\n    green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)),\n    blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n  return {\n    r: Math.round(red),\n    g: Math.round(green),\n    b: Math.round(blue)\n  };\n}\nexport function hslaToRgba(hsla) {\n  const rgbResult = hslToRgb(hsla);\n  return {\n    a: hsla.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\nexport function getRandomRgbColor(min) {\n  const fixedMin = min ?? defaultRgbMin,\n    fixedMax = rgbMax + identity;\n  return {\n    b: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n    g: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n    r: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax)))\n  };\n}\nexport function getStyleFromRgb(color, opacity) {\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n  return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n  let rgb1 = color1,\n    rgb2 = color2;\n  if (rgb1.r === undefined) {\n    rgb1 = hslToRgb(color1);\n  }\n  if (rgb2.r === undefined) {\n    rgb2 = hslToRgb(color2);\n  }\n  return {\n    b: mix(rgb1.b, rgb2.b, size1, size2),\n    g: mix(rgb1.g, rgb2.g, size1, size2),\n    r: mix(rgb1.r, rgb2.r, size1, size2)\n  };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n  if (linkColor === randomColorValue) {\n    return getRandomRgbColor();\n  } else if (linkColor === midColorValue) {\n    const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(),\n      destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n    if (sourceColor && destColor && p2) {\n      return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n    } else {\n      const hslColor = sourceColor ?? destColor;\n      if (hslColor) {\n        return hslToRgb(hslColor);\n      }\n    }\n  } else {\n    return linkColor;\n  }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n  const color = isString(optColor) ? optColor : optColor.value;\n  if (color === randomColorValue) {\n    if (consent) {\n      return rangeColorToRgb(engine, {\n        value: color\n      });\n    }\n    if (blink) {\n      return randomColorValue;\n    }\n    return midColorValue;\n  } else if (color === midColorValue) {\n    return midColorValue;\n  } else {\n    return rangeColorToRgb(engine, {\n      value: color\n    });\n  }\n}\nexport function getHslFromAnimation(animation) {\n  return animation !== undefined ? {\n    h: animation.h.value,\n    s: animation.s.value,\n    l: animation.l.value\n  } : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n  const resColor = {\n    h: {\n      enable: false,\n      value: hsl.h\n    },\n    s: {\n      enable: false,\n      value: hsl.s\n    },\n    l: {\n      enable: false,\n      value: hsl.l\n    }\n  };\n  if (animationOptions) {\n    setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n    setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n    setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n  }\n  return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n  colorValue.enable = colorAnimation.enable;\n  if (colorValue.enable) {\n    colorValue.velocity = getRangeValue(colorAnimation.speed) / percentDenominator * reduceFactor;\n    colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n    colorValue.status = AnimationStatus.increasing;\n    colorValue.loops = defaultLoops;\n    colorValue.maxLoops = getRangeValue(colorAnimation.count);\n    colorValue.time = defaultTime;\n    colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n    if (!colorAnimation.sync) {\n      colorValue.velocity *= getRandom();\n      colorValue.value *= getRandom();\n    }\n    colorValue.initialValue = colorValue.value;\n    colorValue.offset = setRangeValue(colorAnimation.offset);\n  } else {\n    colorValue.velocity = defaultVelocity;\n  }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n  const minLoops = 0,\n    minDelay = 0,\n    identity = 1,\n    minVelocity = 0,\n    minOffset = 0,\n    velocityFactor = 3.6;\n  if (!data || !data.enable || (data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops)) {\n    return;\n  }\n  if (!data.time) {\n    data.time = 0;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    data.time += delta.value;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    return;\n  }\n  const offset = data.offset ? randomInRange(data.offset) : minOffset,\n    velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor,\n    decay = data.decay ?? identity,\n    max = getRangeMax(range),\n    min = getRangeMin(range);\n  if (!decrease || data.status === AnimationStatus.increasing) {\n    data.value += velocity;\n    if (data.value > max) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      if (decrease) {\n        data.status = AnimationStatus.decreasing;\n      } else {\n        data.value -= max;\n      }\n    }\n  } else {\n    data.value -= velocity;\n    const minValue = 0;\n    if (data.value < minValue) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      data.status = AnimationStatus.increasing;\n    }\n  }\n  if (data.velocity && decay !== identity) {\n    data.velocity *= decay;\n  }\n  data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n  if (!color) {\n    return;\n  }\n  const {\n      h,\n      s,\n      l\n    } = color,\n    ranges = {\n      h: {\n        min: 0,\n        max: 360\n      },\n      s: {\n        min: 0,\n        max: 100\n      },\n      l: {\n        min: 0,\n        max: 100\n      }\n    };\n  if (h) {\n    updateColorValue(h, ranges.h, false, delta);\n  }\n  if (s) {\n    updateColorValue(s, ranges.s, true, delta);\n  }\n  if (l) {\n    updateColorValue(l, ranges.l, true, delta);\n  }\n}","map":{"version":3,"names":["clamp","getRandom","getRangeMax","getRangeMin","getRangeValue","mix","randomInRange","setRangeValue","decayOffset","defaultLoops","defaultOpacity","defaultRgbMin","defaultTime","defaultVelocity","double","hMax","hMin","hPhase","half","identity","lMax","lMin","midColorValue","millisecondsToSeconds","percentDenominator","phaseNumerator","randomColorValue","rgbFactor","rgbMax","sMax","sMin","sNormalizedOffset","sextuple","triple","isArray","isString","AnimationStatus","itemFromArray","stringToRgba","engine","input","manager","colorManagers","values","startsWith","stringPrefix","parseString","rangeColorToRgb","index","useIndex","color","value","colorToRgb","res","handleRangeColor","getRandomRgbColor","stringToRgb","handleColor","colorToHsl","rgb","rgbToHsl","undefined","rangeColorToHsl","r1","r","g1","g","b1","b","max","Math","min","h","l","s","stringToAlpha","a","hslToRgb","hsl","hNormalized","sNormalized","lNormalized","grayscaleValue","round","channel","temp1","temp2","temp3","temp3Min","temp3Max","temp3Offset","phaseThird","red","green","blue","hslaToRgba","hsla","rgbResult","fixedMin","fixedMax","floor","getStyleFromRgb","opacity","getStyleFromHsl","colorMix","color1","color2","size1","size2","rgb1","rgb2","getLinkColor","p1","p2","linkColor","sourceColor","getFillColor","getStrokeColor","destColor","getRadius","hslColor","getLinkRandomColor","optColor","blink","consent","getHslFromAnimation","animation","getHslAnimationFromHsl","animationOptions","reduceFactor","resColor","enable","setColorAnimation","colorValue","colorAnimation","velocity","speed","decay","status","increasing","loops","maxLoops","count","time","delayTime","delay","sync","initialValue","offset","updateColorValue","data","range","decrease","delta","minLoops","minDelay","minVelocity","minOffset","velocityFactor","factor","decreasing","minValue","updateColor","ranges"],"sources":["D:/UNIMART-OVERSEAS/unimart/node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js"],"sourcesContent":["import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue, } from \"./NumberUtils.js\";\nimport { decayOffset, defaultLoops, defaultOpacity, defaultRgbMin, defaultTime, defaultVelocity, double, hMax, hMin, hPhase, half, identity, lMax, lMin, midColorValue, millisecondsToSeconds, percentDenominator, phaseNumerator, randomColorValue, rgbFactor, rgbMax, sMax, sMin, sNormalizedOffset, sextuple, triple, } from \"../Core/Utils/Constants.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nfunction stringToRgba(engine, input) {\n    if (!input) {\n        return;\n    }\n    for (const manager of engine.colorManagers.values()) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return colorToRgb(engine, color.value, index, useIndex);\n    }\n    if (isArray(color.value)) {\n        return rangeColorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n    }\n    if (isArray(color.value)) {\n        return colorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n    const rgb = colorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n    const r1 = color.r / rgbMax, g1 = color.g / rgbMax, b1 = color.b / rgbMax, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: hMin,\n        l: (max + min) * half,\n        s: sMin,\n    };\n    if (max !== min) {\n        res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min));\n    }\n    res.l *= lMax;\n    res.s *= sMax;\n    res.h *= hPhase;\n    if (res.h < hMin) {\n        res.h += hMax;\n    }\n    if (res.h >= hMax) {\n        res.h -= hMax;\n    }\n    return res;\n}\nexport function stringToAlpha(engine, input) {\n    return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n    return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n    const h = ((hsl.h % hMax) + hMax) % hMax, s = Math.max(sMin, Math.min(sMax, hsl.s)), l = Math.max(lMin, Math.min(lMax, hsl.l)), hNormalized = h / hMax, sNormalized = s / sMax, lNormalized = l / lMax;\n    if (s === sMin) {\n        const grayscaleValue = Math.round(lNormalized * rgbFactor);\n        return { r: grayscaleValue, g: grayscaleValue, b: grayscaleValue };\n    }\n    const channel = (temp1, temp2, temp3) => {\n        const temp3Min = 0, temp3Max = 1;\n        if (temp3 < temp3Min) {\n            temp3++;\n        }\n        if (temp3 > temp3Max) {\n            temp3--;\n        }\n        if (temp3 * sextuple < temp3Max) {\n            return temp1 + (temp2 - temp1) * sextuple * temp3;\n        }\n        if (temp3 * double < temp3Max) {\n            return temp2;\n        }\n        if (temp3 * triple < temp3Max * double) {\n            const temp3Offset = double / triple;\n            return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n        }\n        return temp1;\n    }, temp1 = lNormalized < half\n        ? lNormalized * (sNormalizedOffset + sNormalized)\n        : lNormalized + sNormalized - lNormalized * sNormalized, temp2 = double * lNormalized - temp1, phaseThird = phaseNumerator / triple, red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)), green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)), blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n    return { r: Math.round(red), g: Math.round(green), b: Math.round(blue) };\n}\nexport function hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nexport function getRandomRgbColor(min) {\n    const fixedMin = min ?? defaultRgbMin, fixedMax = rgbMax + identity;\n    return {\n        b: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n        g: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n        r: Math.floor(randomInRange(setRangeValue(fixedMin, fixedMax))),\n    };\n}\nexport function getStyleFromRgb(color, opacity) {\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: mix(rgb1.b, rgb2.b, size1, size2),\n        g: mix(rgb1.g, rgb2.g, size1, size2),\n        r: mix(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n    const color = isString(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb(engine, {\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb(engine, {\n            value: color,\n        });\n    }\n}\nexport function getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    if (colorValue.enable) {\n        colorValue.velocity = (getRangeValue(colorAnimation.speed) / percentDenominator) * reduceFactor;\n        colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n        colorValue.status = AnimationStatus.increasing;\n        colorValue.loops = defaultLoops;\n        colorValue.maxLoops = getRangeValue(colorAnimation.count);\n        colorValue.time = defaultTime;\n        colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= getRandom();\n            colorValue.value *= getRandom();\n        }\n        colorValue.initialValue = colorValue.value;\n        colorValue.offset = setRangeValue(colorAnimation.offset);\n    }\n    else {\n        colorValue.velocity = defaultVelocity;\n    }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minOffset = 0, velocityFactor = 3.6;\n    if (!data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    const offset = data.offset ? randomInRange(data.offset) : minOffset, velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor, decay = data.decay ?? identity, max = getRangeMax(range), min = getRangeMin(range);\n    if (!decrease || data.status === AnimationStatus.increasing) {\n        data.value += velocity;\n        if (data.value > max) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            if (decrease) {\n                data.status = AnimationStatus.decreasing;\n            }\n            else {\n                data.value -= max;\n            }\n        }\n    }\n    else {\n        data.value -= velocity;\n        const minValue = 0;\n        if (data.value < minValue) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            data.status = AnimationStatus.increasing;\n        }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color, ranges = {\n        h: { min: 0, max: 360 },\n        s: { min: 0, max: 100 },\n        l: { min: 0, max: 100 },\n    };\n    if (h) {\n        updateColorValue(h, ranges.h, false, delta);\n    }\n    if (s) {\n        updateColorValue(s, ranges.s, true, delta);\n    }\n    if (l) {\n        updateColorValue(l, ranges.l, true, delta);\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,GAAG,EAAEC,aAAa,EAAEC,aAAa,QAAS,kBAAkB;AAChI,SAASC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,WAAW,EAAEC,eAAe,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,iBAAiB,EAAEC,QAAQ,EAAEC,MAAM,QAAS,4BAA4B;AAC5V,SAASC,OAAO,EAAEC,QAAQ,QAAQ,gBAAgB;AAClD,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAE;EACjC,IAAI,CAACA,KAAK,EAAE;IACR;EACJ;EACA,KAAK,MAAMC,OAAO,IAAIF,MAAM,CAACG,aAAa,CAACC,MAAM,CAAC,CAAC,EAAE;IACjD,IAAIH,KAAK,CAACI,UAAU,CAACH,OAAO,CAACI,YAAY,CAAC,EAAE;MACxC,OAAOJ,OAAO,CAACK,WAAW,CAACN,KAAK,CAAC;IACrC;EACJ;AACJ;AACA,OAAO,SAASO,eAAeA,CAACR,MAAM,EAAEC,KAAK,EAAEQ,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAE;EACnE,IAAI,CAACT,KAAK,EAAE;IACR;EACJ;EACA,MAAMU,KAAK,GAAGf,QAAQ,CAACK,KAAK,CAAC,GAAG;IAAEW,KAAK,EAAEX;EAAM,CAAC,GAAGA,KAAK;EACxD,IAAIL,QAAQ,CAACe,KAAK,CAACC,KAAK,CAAC,EAAE;IACvB,OAAOC,UAAU,CAACb,MAAM,EAAEW,KAAK,CAACC,KAAK,EAAEH,KAAK,EAAEC,QAAQ,CAAC;EAC3D;EACA,IAAIf,OAAO,CAACgB,KAAK,CAACC,KAAK,CAAC,EAAE;IACtB,OAAOJ,eAAe,CAACR,MAAM,EAAE;MAC3BY,KAAK,EAAEd,aAAa,CAACa,KAAK,CAACC,KAAK,EAAEH,KAAK,EAAEC,QAAQ;IACrD,CAAC,CAAC;EACN;EACA,KAAK,MAAMR,OAAO,IAAIF,MAAM,CAACG,aAAa,CAACC,MAAM,CAAC,CAAC,EAAE;IACjD,MAAMU,GAAG,GAAGZ,OAAO,CAACa,gBAAgB,CAACJ,KAAK,CAAC;IAC3C,IAAIG,GAAG,EAAE;MACL,OAAOA,GAAG;IACd;EACJ;AACJ;AACA,OAAO,SAASD,UAAUA,CAACb,MAAM,EAAEC,KAAK,EAAEQ,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAE;EAC9D,IAAI,CAACT,KAAK,EAAE;IACR;EACJ;EACA,MAAMU,KAAK,GAAGf,QAAQ,CAACK,KAAK,CAAC,GAAG;IAAEW,KAAK,EAAEX;EAAM,CAAC,GAAGA,KAAK;EACxD,IAAIL,QAAQ,CAACe,KAAK,CAACC,KAAK,CAAC,EAAE;IACvB,OAAOD,KAAK,CAACC,KAAK,KAAKzB,gBAAgB,GAAG6B,iBAAiB,CAAC,CAAC,GAAGC,WAAW,CAACjB,MAAM,EAAEW,KAAK,CAACC,KAAK,CAAC;EACpG;EACA,IAAIjB,OAAO,CAACgB,KAAK,CAACC,KAAK,CAAC,EAAE;IACtB,OAAOC,UAAU,CAACb,MAAM,EAAE;MACtBY,KAAK,EAAEd,aAAa,CAACa,KAAK,CAACC,KAAK,EAAEH,KAAK,EAAEC,QAAQ;IACrD,CAAC,CAAC;EACN;EACA,KAAK,MAAMR,OAAO,IAAIF,MAAM,CAACG,aAAa,CAACC,MAAM,CAAC,CAAC,EAAE;IACjD,MAAMU,GAAG,GAAGZ,OAAO,CAACgB,WAAW,CAACP,KAAK,CAAC;IACtC,IAAIG,GAAG,EAAE;MACL,OAAOA,GAAG;IACd;EACJ;AACJ;AACA,OAAO,SAASK,UAAUA,CAACnB,MAAM,EAAEW,KAAK,EAAEF,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAE;EAC9D,MAAMU,GAAG,GAAGP,UAAU,CAACb,MAAM,EAAEW,KAAK,EAAEF,KAAK,EAAEC,QAAQ,CAAC;EACtD,OAAOU,GAAG,GAAGC,QAAQ,CAACD,GAAG,CAAC,GAAGE,SAAS;AAC1C;AACA,OAAO,SAASC,eAAeA,CAACvB,MAAM,EAAEW,KAAK,EAAEF,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAE;EACnE,MAAMU,GAAG,GAAGZ,eAAe,CAACR,MAAM,EAAEW,KAAK,EAAEF,KAAK,EAAEC,QAAQ,CAAC;EAC3D,OAAOU,GAAG,GAAGC,QAAQ,CAACD,GAAG,CAAC,GAAGE,SAAS;AAC1C;AACA,OAAO,SAASD,QAAQA,CAACV,KAAK,EAAE;EAC5B,MAAMa,EAAE,GAAGb,KAAK,CAACc,CAAC,GAAGpC,MAAM;IAAEqC,EAAE,GAAGf,KAAK,CAACgB,CAAC,GAAGtC,MAAM;IAAEuC,EAAE,GAAGjB,KAAK,CAACkB,CAAC,GAAGxC,MAAM;IAAEyC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAACN,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC;IAAEI,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACR,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC;IAAEd,GAAG,GAAG;MACrImB,CAAC,EAAExD,IAAI;MACPyD,CAAC,EAAE,CAACJ,GAAG,GAAGE,GAAG,IAAIrD,IAAI;MACrBwD,CAAC,EAAE5C;IACP,CAAC;EACD,IAAIuC,GAAG,KAAKE,GAAG,EAAE;IACblB,GAAG,CAACqB,CAAC,GAAGrB,GAAG,CAACoB,CAAC,GAAGvD,IAAI,GAAG,CAACmD,GAAG,GAAGE,GAAG,KAAKF,GAAG,GAAGE,GAAG,CAAC,GAAG,CAACF,GAAG,GAAGE,GAAG,KAAKzD,MAAM,GAAGuD,GAAG,GAAGE,GAAG,CAAC;IACrFlB,GAAG,CAACmB,CAAC,GACDT,EAAE,KAAKM,GAAG,GACJ,CAACJ,EAAE,GAAGE,EAAE,KAAKE,GAAG,GAAGE,GAAG,CAAC,GACtBlB,GAAG,CAACmB,CAAC,GAAGP,EAAE,KAAKI,GAAG,GAAGvD,MAAM,GAAG,CAACqD,EAAE,GAAGJ,EAAE,KAAKM,GAAG,GAAGE,GAAG,CAAC,GAAGzD,MAAM,GAAGA,MAAM,GAAG,CAACiD,EAAE,GAAGE,EAAE,KAAKI,GAAG,GAAGE,GAAG,CAAE;EACjH;EACAlB,GAAG,CAACoB,CAAC,IAAIrD,IAAI;EACbiC,GAAG,CAACqB,CAAC,IAAI7C,IAAI;EACbwB,GAAG,CAACmB,CAAC,IAAIvD,MAAM;EACf,IAAIoC,GAAG,CAACmB,CAAC,GAAGxD,IAAI,EAAE;IACdqC,GAAG,CAACmB,CAAC,IAAIzD,IAAI;EACjB;EACA,IAAIsC,GAAG,CAACmB,CAAC,IAAIzD,IAAI,EAAE;IACfsC,GAAG,CAACmB,CAAC,IAAIzD,IAAI;EACjB;EACA,OAAOsC,GAAG;AACd;AACA,OAAO,SAASsB,aAAaA,CAACpC,MAAM,EAAEC,KAAK,EAAE;EACzC,OAAOF,YAAY,CAACC,MAAM,EAAEC,KAAK,CAAC,EAAEoC,CAAC;AACzC;AACA,OAAO,SAASpB,WAAWA,CAACjB,MAAM,EAAEC,KAAK,EAAE;EACvC,OAAOF,YAAY,CAACC,MAAM,EAAEC,KAAK,CAAC;AACtC;AACA,OAAO,SAASqC,QAAQA,CAACC,GAAG,EAAE;EAC1B,MAAMN,CAAC,GAAG,CAAEM,GAAG,CAACN,CAAC,GAAGzD,IAAI,GAAIA,IAAI,IAAIA,IAAI;IAAE2D,CAAC,GAAGJ,IAAI,CAACD,GAAG,CAACvC,IAAI,EAAEwC,IAAI,CAACC,GAAG,CAAC1C,IAAI,EAAEiD,GAAG,CAACJ,CAAC,CAAC,CAAC;IAAED,CAAC,GAAGH,IAAI,CAACD,GAAG,CAAChD,IAAI,EAAEiD,IAAI,CAACC,GAAG,CAACnD,IAAI,EAAE0D,GAAG,CAACL,CAAC,CAAC,CAAC;IAAEM,WAAW,GAAGP,CAAC,GAAGzD,IAAI;IAAEiE,WAAW,GAAGN,CAAC,GAAG7C,IAAI;IAAEoD,WAAW,GAAGR,CAAC,GAAGrD,IAAI;EACtM,IAAIsD,CAAC,KAAK5C,IAAI,EAAE;IACZ,MAAMoD,cAAc,GAAGZ,IAAI,CAACa,KAAK,CAACF,WAAW,GAAGtD,SAAS,CAAC;IAC1D,OAAO;MAAEqC,CAAC,EAAEkB,cAAc;MAAEhB,CAAC,EAAEgB,cAAc;MAAEd,CAAC,EAAEc;IAAe,CAAC;EACtE;EACA,MAAME,OAAO,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;MACrC,MAAMC,QAAQ,GAAG,CAAC;QAAEC,QAAQ,GAAG,CAAC;MAChC,IAAIF,KAAK,GAAGC,QAAQ,EAAE;QAClBD,KAAK,EAAE;MACX;MACA,IAAIA,KAAK,GAAGE,QAAQ,EAAE;QAClBF,KAAK,EAAE;MACX;MACA,IAAIA,KAAK,GAAGvD,QAAQ,GAAGyD,QAAQ,EAAE;QAC7B,OAAOJ,KAAK,GAAG,CAACC,KAAK,GAAGD,KAAK,IAAIrD,QAAQ,GAAGuD,KAAK;MACrD;MACA,IAAIA,KAAK,GAAGzE,MAAM,GAAG2E,QAAQ,EAAE;QAC3B,OAAOH,KAAK;MAChB;MACA,IAAIC,KAAK,GAAGtD,MAAM,GAAGwD,QAAQ,GAAG3E,MAAM,EAAE;QACpC,MAAM4E,WAAW,GAAG5E,MAAM,GAAGmB,MAAM;QACnC,OAAOoD,KAAK,GAAG,CAACC,KAAK,GAAGD,KAAK,KAAKK,WAAW,GAAGH,KAAK,CAAC,GAAGvD,QAAQ;MACrE;MACA,OAAOqD,KAAK;IAChB,CAAC;IAAEA,KAAK,GAAGJ,WAAW,GAAG/D,IAAI,GACvB+D,WAAW,IAAIlD,iBAAiB,GAAGiD,WAAW,CAAC,GAC/CC,WAAW,GAAGD,WAAW,GAAGC,WAAW,GAAGD,WAAW;IAAEM,KAAK,GAAGxE,MAAM,GAAGmE,WAAW,GAAGI,KAAK;IAAEM,UAAU,GAAGlE,cAAc,GAAGQ,MAAM;IAAE2D,GAAG,GAAGtB,IAAI,CAACC,GAAG,CAAC5C,SAAS,EAAEA,SAAS,GAAGyD,OAAO,CAACE,KAAK,EAAED,KAAK,EAAEN,WAAW,GAAGY,UAAU,CAAC,CAAC;IAAEE,KAAK,GAAGvB,IAAI,CAACC,GAAG,CAAC5C,SAAS,EAAEA,SAAS,GAAGyD,OAAO,CAACE,KAAK,EAAED,KAAK,EAAEN,WAAW,CAAC,CAAC;IAAEe,IAAI,GAAGxB,IAAI,CAACC,GAAG,CAAC5C,SAAS,EAAEA,SAAS,GAAGyD,OAAO,CAACE,KAAK,EAAED,KAAK,EAAEN,WAAW,GAAGY,UAAU,CAAC,CAAC;EACrY,OAAO;IAAE3B,CAAC,EAAEM,IAAI,CAACa,KAAK,CAACS,GAAG,CAAC;IAAE1B,CAAC,EAAEI,IAAI,CAACa,KAAK,CAACU,KAAK,CAAC;IAAEzB,CAAC,EAAEE,IAAI,CAACa,KAAK,CAACW,IAAI;EAAE,CAAC;AAC5E;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAE;EAC7B,MAAMC,SAAS,GAAGpB,QAAQ,CAACmB,IAAI,CAAC;EAChC,OAAO;IACHpB,CAAC,EAAEoB,IAAI,CAACpB,CAAC;IACTR,CAAC,EAAE6B,SAAS,CAAC7B,CAAC;IACdF,CAAC,EAAE+B,SAAS,CAAC/B,CAAC;IACdF,CAAC,EAAEiC,SAAS,CAACjC;EACjB,CAAC;AACL;AACA,OAAO,SAAST,iBAAiBA,CAACgB,GAAG,EAAE;EACnC,MAAM2B,QAAQ,GAAG3B,GAAG,IAAI5D,aAAa;IAAEwF,QAAQ,GAAGvE,MAAM,GAAGT,QAAQ;EACnE,OAAO;IACHiD,CAAC,EAAEE,IAAI,CAAC8B,KAAK,CAAC9F,aAAa,CAACC,aAAa,CAAC2F,QAAQ,EAAEC,QAAQ,CAAC,CAAC,CAAC;IAC/DjC,CAAC,EAAEI,IAAI,CAAC8B,KAAK,CAAC9F,aAAa,CAACC,aAAa,CAAC2F,QAAQ,EAAEC,QAAQ,CAAC,CAAC,CAAC;IAC/DnC,CAAC,EAAEM,IAAI,CAAC8B,KAAK,CAAC9F,aAAa,CAACC,aAAa,CAAC2F,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAClE,CAAC;AACL;AACA,OAAO,SAASE,eAAeA,CAACnD,KAAK,EAAEoD,OAAO,EAAE;EAC5C,OAAO,QAAQpD,KAAK,CAACc,CAAC,KAAKd,KAAK,CAACgB,CAAC,KAAKhB,KAAK,CAACkB,CAAC,KAAKkC,OAAO,IAAI5F,cAAc,GAAG;AACnF;AACA,OAAO,SAAS6F,eAAeA,CAACrD,KAAK,EAAEoD,OAAO,EAAE;EAC5C,OAAO,QAAQpD,KAAK,CAACsB,CAAC,KAAKtB,KAAK,CAACwB,CAAC,MAAMxB,KAAK,CAACuB,CAAC,MAAM6B,OAAO,IAAI5F,cAAc,GAAG;AACrF;AACA,OAAO,SAAS8F,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACnD,IAAIC,IAAI,GAAGJ,MAAM;IAAEK,IAAI,GAAGJ,MAAM;EAChC,IAAIG,IAAI,CAAC7C,CAAC,KAAKH,SAAS,EAAE;IACtBgD,IAAI,GAAGhC,QAAQ,CAAC4B,MAAM,CAAC;EAC3B;EACA,IAAIK,IAAI,CAAC9C,CAAC,KAAKH,SAAS,EAAE;IACtBiD,IAAI,GAAGjC,QAAQ,CAAC6B,MAAM,CAAC;EAC3B;EACA,OAAO;IACHtC,CAAC,EAAE/D,GAAG,CAACwG,IAAI,CAACzC,CAAC,EAAE0C,IAAI,CAAC1C,CAAC,EAAEuC,KAAK,EAAEC,KAAK,CAAC;IACpC1C,CAAC,EAAE7D,GAAG,CAACwG,IAAI,CAAC3C,CAAC,EAAE4C,IAAI,CAAC5C,CAAC,EAAEyC,KAAK,EAAEC,KAAK,CAAC;IACpC5C,CAAC,EAAE3D,GAAG,CAACwG,IAAI,CAAC7C,CAAC,EAAE8C,IAAI,CAAC9C,CAAC,EAAE2C,KAAK,EAAEC,KAAK;EACvC,CAAC;AACL;AACA,OAAO,SAASG,YAAYA,CAACC,EAAE,EAAEC,EAAE,EAAEC,SAAS,EAAE;EAC5C,IAAIA,SAAS,KAAKxF,gBAAgB,EAAE;IAChC,OAAO6B,iBAAiB,CAAC,CAAC;EAC9B,CAAC,MACI,IAAI2D,SAAS,KAAK5F,aAAa,EAAE;IAClC,MAAM6F,WAAW,GAAGH,EAAE,CAACI,YAAY,CAAC,CAAC,IAAIJ,EAAE,CAACK,cAAc,CAAC,CAAC;MAAEC,SAAS,GAAGL,EAAE,EAAEG,YAAY,CAAC,CAAC,IAAIH,EAAE,EAAEI,cAAc,CAAC,CAAC;IACpH,IAAIF,WAAW,IAAIG,SAAS,IAAIL,EAAE,EAAE;MAChC,OAAOT,QAAQ,CAACW,WAAW,EAAEG,SAAS,EAAEN,EAAE,CAACO,SAAS,CAAC,CAAC,EAAEN,EAAE,CAACM,SAAS,CAAC,CAAC,CAAC;IAC3E,CAAC,MACI;MACD,MAAMC,QAAQ,GAAGL,WAAW,IAAIG,SAAS;MACzC,IAAIE,QAAQ,EAAE;QACV,OAAO3C,QAAQ,CAAC2C,QAAQ,CAAC;MAC7B;IACJ;EACJ,CAAC,MACI;IACD,OAAON,SAAS;EACpB;AACJ;AACA,OAAO,SAASO,kBAAkBA,CAAClF,MAAM,EAAEmF,QAAQ,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACjE,MAAM1E,KAAK,GAAGf,QAAQ,CAACuF,QAAQ,CAAC,GAAGA,QAAQ,GAAGA,QAAQ,CAACvE,KAAK;EAC5D,IAAID,KAAK,KAAKxB,gBAAgB,EAAE;IAC5B,IAAIkG,OAAO,EAAE;MACT,OAAO7E,eAAe,CAACR,MAAM,EAAE;QAC3BY,KAAK,EAAED;MACX,CAAC,CAAC;IACN;IACA,IAAIyE,KAAK,EAAE;MACP,OAAOjG,gBAAgB;IAC3B;IACA,OAAOJ,aAAa;EACxB,CAAC,MACI,IAAI4B,KAAK,KAAK5B,aAAa,EAAE;IAC9B,OAAOA,aAAa;EACxB,CAAC,MACI;IACD,OAAOyB,eAAe,CAACR,MAAM,EAAE;MAC3BY,KAAK,EAAED;IACX,CAAC,CAAC;EACN;AACJ;AACA,OAAO,SAAS2E,mBAAmBA,CAACC,SAAS,EAAE;EAC3C,OAAOA,SAAS,KAAKjE,SAAS,GACxB;IACEW,CAAC,EAAEsD,SAAS,CAACtD,CAAC,CAACrB,KAAK;IACpBuB,CAAC,EAAEoD,SAAS,CAACpD,CAAC,CAACvB,KAAK;IACpBsB,CAAC,EAAEqD,SAAS,CAACrD,CAAC,CAACtB;EACnB,CAAC,GACCU,SAAS;AACnB;AACA,OAAO,SAASkE,sBAAsBA,CAACjD,GAAG,EAAEkD,gBAAgB,EAAEC,YAAY,EAAE;EACxE,MAAMC,QAAQ,GAAG;IACb1D,CAAC,EAAE;MACC2D,MAAM,EAAE,KAAK;MACbhF,KAAK,EAAE2B,GAAG,CAACN;IACf,CAAC;IACDE,CAAC,EAAE;MACCyD,MAAM,EAAE,KAAK;MACbhF,KAAK,EAAE2B,GAAG,CAACJ;IACf,CAAC;IACDD,CAAC,EAAE;MACC0D,MAAM,EAAE,KAAK;MACbhF,KAAK,EAAE2B,GAAG,CAACL;IACf;EACJ,CAAC;EACD,IAAIuD,gBAAgB,EAAE;IAClBI,iBAAiB,CAACF,QAAQ,CAAC1D,CAAC,EAAEwD,gBAAgB,CAACxD,CAAC,EAAEyD,YAAY,CAAC;IAC/DG,iBAAiB,CAACF,QAAQ,CAACxD,CAAC,EAAEsD,gBAAgB,CAACtD,CAAC,EAAEuD,YAAY,CAAC;IAC/DG,iBAAiB,CAACF,QAAQ,CAACzD,CAAC,EAAEuD,gBAAgB,CAACvD,CAAC,EAAEwD,YAAY,CAAC;EACnE;EACA,OAAOC,QAAQ;AACnB;AACA,SAASE,iBAAiBA,CAACC,UAAU,EAAEC,cAAc,EAAEL,YAAY,EAAE;EACjEI,UAAU,CAACF,MAAM,GAAGG,cAAc,CAACH,MAAM;EACzC,IAAIE,UAAU,CAACF,MAAM,EAAE;IACnBE,UAAU,CAACE,QAAQ,GAAInI,aAAa,CAACkI,cAAc,CAACE,KAAK,CAAC,GAAGhH,kBAAkB,GAAIyG,YAAY;IAC/FI,UAAU,CAACI,KAAK,GAAGjI,WAAW,GAAGJ,aAAa,CAACkI,cAAc,CAACG,KAAK,CAAC;IACpEJ,UAAU,CAACK,MAAM,GAAGtG,eAAe,CAACuG,UAAU;IAC9CN,UAAU,CAACO,KAAK,GAAGnI,YAAY;IAC/B4H,UAAU,CAACQ,QAAQ,GAAGzI,aAAa,CAACkI,cAAc,CAACQ,KAAK,CAAC;IACzDT,UAAU,CAACU,IAAI,GAAGnI,WAAW;IAC7ByH,UAAU,CAACW,SAAS,GAAG5I,aAAa,CAACkI,cAAc,CAACW,KAAK,CAAC,GAAG1H,qBAAqB;IAClF,IAAI,CAAC+G,cAAc,CAACY,IAAI,EAAE;MACtBb,UAAU,CAACE,QAAQ,IAAItI,SAAS,CAAC,CAAC;MAClCoI,UAAU,CAAClF,KAAK,IAAIlD,SAAS,CAAC,CAAC;IACnC;IACAoI,UAAU,CAACc,YAAY,GAAGd,UAAU,CAAClF,KAAK;IAC1CkF,UAAU,CAACe,MAAM,GAAG7I,aAAa,CAAC+H,cAAc,CAACc,MAAM,CAAC;EAC5D,CAAC,MACI;IACDf,UAAU,CAACE,QAAQ,GAAG1H,eAAe;EACzC;AACJ;AACA,OAAO,SAASwI,gBAAgBA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EAC3D,MAAMC,QAAQ,GAAG,CAAC;IAAEC,QAAQ,GAAG,CAAC;IAAExI,QAAQ,GAAG,CAAC;IAAEyI,WAAW,GAAG,CAAC;IAAEC,SAAS,GAAG,CAAC;IAAEC,cAAc,GAAG,GAAG;EACpG,IAAI,CAACR,IAAI,IACL,CAACA,IAAI,CAACnB,MAAM,IACX,CAACmB,IAAI,CAACT,QAAQ,IAAIa,QAAQ,IAAIA,QAAQ,IAAI,CAACJ,IAAI,CAACV,KAAK,IAAIc,QAAQ,KAAKJ,IAAI,CAACT,QAAQ,IAAIa,QAAQ,CAAE,EAAE;IACpG;EACJ;EACA,IAAI,CAACJ,IAAI,CAACP,IAAI,EAAE;IACZO,IAAI,CAACP,IAAI,GAAG,CAAC;EACjB;EACA,IAAI,CAACO,IAAI,CAACN,SAAS,IAAIW,QAAQ,IAAIA,QAAQ,IAAIL,IAAI,CAACP,IAAI,IAAIO,IAAI,CAACN,SAAS,IAAIW,QAAQ,CAAC,EAAE;IACrFL,IAAI,CAACP,IAAI,IAAIU,KAAK,CAACtG,KAAK;EAC5B;EACA,IAAI,CAACmG,IAAI,CAACN,SAAS,IAAIW,QAAQ,IAAIA,QAAQ,IAAIL,IAAI,CAACP,IAAI,IAAIO,IAAI,CAACN,SAAS,IAAIW,QAAQ,CAAC,EAAE;IACrF;EACJ;EACA,MAAMP,MAAM,GAAGE,IAAI,CAACF,MAAM,GAAG9I,aAAa,CAACgJ,IAAI,CAACF,MAAM,CAAC,GAAGS,SAAS;IAAEtB,QAAQ,GAAG,CAACe,IAAI,CAACf,QAAQ,IAAIqB,WAAW,IAAIH,KAAK,CAACM,MAAM,GAAGX,MAAM,GAAGU,cAAc;IAAErB,KAAK,GAAGa,IAAI,CAACb,KAAK,IAAItH,QAAQ;IAAEkD,GAAG,GAAGnE,WAAW,CAACqJ,KAAK,CAAC;IAAEhF,GAAG,GAAGpE,WAAW,CAACoJ,KAAK,CAAC;EAC3O,IAAI,CAACC,QAAQ,IAAIF,IAAI,CAACZ,MAAM,KAAKtG,eAAe,CAACuG,UAAU,EAAE;IACzDW,IAAI,CAACnG,KAAK,IAAIoF,QAAQ;IACtB,IAAIe,IAAI,CAACnG,KAAK,GAAGkB,GAAG,EAAE;MAClB,IAAI,CAACiF,IAAI,CAACV,KAAK,EAAE;QACbU,IAAI,CAACV,KAAK,GAAG,CAAC;MAClB;MACAU,IAAI,CAACV,KAAK,EAAE;MACZ,IAAIY,QAAQ,EAAE;QACVF,IAAI,CAACZ,MAAM,GAAGtG,eAAe,CAAC4H,UAAU;MAC5C,CAAC,MACI;QACDV,IAAI,CAACnG,KAAK,IAAIkB,GAAG;MACrB;IACJ;EACJ,CAAC,MACI;IACDiF,IAAI,CAACnG,KAAK,IAAIoF,QAAQ;IACtB,MAAM0B,QAAQ,GAAG,CAAC;IAClB,IAAIX,IAAI,CAACnG,KAAK,GAAG8G,QAAQ,EAAE;MACvB,IAAI,CAACX,IAAI,CAACV,KAAK,EAAE;QACbU,IAAI,CAACV,KAAK,GAAG,CAAC;MAClB;MACAU,IAAI,CAACV,KAAK,EAAE;MACZU,IAAI,CAACZ,MAAM,GAAGtG,eAAe,CAACuG,UAAU;IAC5C;EACJ;EACA,IAAIW,IAAI,CAACf,QAAQ,IAAIE,KAAK,KAAKtH,QAAQ,EAAE;IACrCmI,IAAI,CAACf,QAAQ,IAAIE,KAAK;EAC1B;EACAa,IAAI,CAACnG,KAAK,GAAGnD,KAAK,CAACsJ,IAAI,CAACnG,KAAK,EAAEoB,GAAG,EAAEF,GAAG,CAAC;AAC5C;AACA,OAAO,SAAS6F,WAAWA,CAAChH,KAAK,EAAEuG,KAAK,EAAE;EACtC,IAAI,CAACvG,KAAK,EAAE;IACR;EACJ;EACA,MAAM;MAAEsB,CAAC;MAAEE,CAAC;MAAED;IAAE,CAAC,GAAGvB,KAAK;IAAEiH,MAAM,GAAG;MAChC3F,CAAC,EAAE;QAAED,GAAG,EAAE,CAAC;QAAEF,GAAG,EAAE;MAAI,CAAC;MACvBK,CAAC,EAAE;QAAEH,GAAG,EAAE,CAAC;QAAEF,GAAG,EAAE;MAAI,CAAC;MACvBI,CAAC,EAAE;QAAEF,GAAG,EAAE,CAAC;QAAEF,GAAG,EAAE;MAAI;IAC1B,CAAC;EACD,IAAIG,CAAC,EAAE;IACH6E,gBAAgB,CAAC7E,CAAC,EAAE2F,MAAM,CAAC3F,CAAC,EAAE,KAAK,EAAEiF,KAAK,CAAC;EAC/C;EACA,IAAI/E,CAAC,EAAE;IACH2E,gBAAgB,CAAC3E,CAAC,EAAEyF,MAAM,CAACzF,CAAC,EAAE,IAAI,EAAE+E,KAAK,CAAC;EAC9C;EACA,IAAIhF,CAAC,EAAE;IACH4E,gBAAgB,CAAC5E,CAAC,EAAE0F,MAAM,CAAC1F,CAAC,EAAE,IAAI,EAAEgF,KAAK,CAAC;EAC9C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
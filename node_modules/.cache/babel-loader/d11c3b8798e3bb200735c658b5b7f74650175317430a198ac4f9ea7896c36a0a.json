{"ast":null,"code":"import { canvasFirstIndex, canvasTag, errorPrefix, generatedAttribute, generatedFalse, generatedTrue, loadMinIndex, loadRandomFactor, none, one, removeDeleteCount } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n  let res = map.get(container);\n  if (!res || force) {\n    res = await Promise.all([...initializers.values()].map(t => t(container)));\n    map.set(container, res);\n  }\n  return res;\n}\nasync function getDataFromUrl(data) {\n  const url = itemFromSingleOrMultiple(data.url, data.index);\n  if (!url) {\n    return data.fallback;\n  }\n  const response = await fetch(url);\n  if (response.ok) {\n    return await response.json();\n  }\n  getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n  return data.fallback;\n}\nconst getCanvasFromContainer = domContainer => {\n    let canvasEl;\n    if (domContainer instanceof HTMLCanvasElement || domContainer.tagName.toLowerCase() === canvasTag) {\n      canvasEl = domContainer;\n      if (!canvasEl.dataset[generatedAttribute]) {\n        canvasEl.dataset[generatedAttribute] = generatedFalse;\n      }\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(canvasTag);\n      if (existingCanvases.length) {\n        canvasEl = existingCanvases[canvasFirstIndex];\n        canvasEl.dataset[generatedAttribute] = generatedFalse;\n      } else {\n        canvasEl = document.createElement(canvasTag);\n        canvasEl.dataset[generatedAttribute] = generatedTrue;\n        domContainer.appendChild(canvasEl);\n      }\n    }\n    const fullPercent = \"100%\";\n    if (!canvasEl.style.width) {\n      canvasEl.style.width = fullPercent;\n    }\n    if (!canvasEl.style.height) {\n      canvasEl.style.height = fullPercent;\n    }\n    return canvasEl;\n  },\n  getDomContainer = (id, source) => {\n    let domContainer = source ?? document.getElementById(id);\n    if (domContainer) {\n      return domContainer;\n    }\n    domContainer = document.createElement(\"div\");\n    domContainer.id = id;\n    domContainer.dataset[generatedAttribute] = generatedTrue;\n    document.body.append(domContainer);\n    return domContainer;\n  };\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = [];\n    this.colorManagers = new Map();\n    this.easingFunctions = new Map();\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.effectDrawers = new Map();\n    this.shapeDrawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get items() {\n    return this._domArray;\n  }\n  get version() {\n    return \"3.8.1\";\n  }\n  async addColorManager(manager, refresh = true) {\n    this.colorManagers.set(manager.key, manager);\n    await this.refresh(refresh);\n  }\n  addConfig(config) {\n    const key = config.key ?? config.name ?? \"default\";\n    this._configs.set(key, config);\n    this._eventDispatcher.dispatchEvent(EventType.configAdded, {\n      data: {\n        name: key,\n        config\n      }\n    });\n  }\n  async addEasing(name, easing, refresh = true) {\n    if (this.getEasing(name)) {\n      return;\n    }\n    this.easingFunctions.set(name, easing);\n    await this.refresh(refresh);\n  }\n  async addEffect(effect, drawer, refresh = true) {\n    executeOnSingleOrMultiple(effect, type => {\n      if (!this.getEffectDrawer(type)) {\n        this.effectDrawers.set(type, drawer);\n      }\n    });\n    await this.refresh(refresh);\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  async addInteractor(name, interactorInitializer, refresh = true) {\n    this._initializers.interactors.set(name, interactorInitializer);\n    await this.refresh(refresh);\n  }\n  async addMover(name, moverInitializer, refresh = true) {\n    this._initializers.movers.set(name, moverInitializer);\n    await this.refresh(refresh);\n  }\n  async addParticleUpdater(name, updaterInitializer, refresh = true) {\n    this._initializers.updaters.set(name, updaterInitializer);\n    await this.refresh(refresh);\n  }\n  async addPathGenerator(name, generator, refresh = true) {\n    if (!this.getPathGenerator(name)) {\n      this.pathGenerators.set(name, generator);\n    }\n    await this.refresh(refresh);\n  }\n  async addPlugin(plugin, refresh = true) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n    await this.refresh(refresh);\n  }\n  async addPreset(preset, options, override = false, refresh = true) {\n    if (override || !this.getPreset(preset)) {\n      this.presets.set(preset, options);\n    }\n    await this.refresh(refresh);\n  }\n  async addShape(drawer, refresh = true) {\n    for (const validType of drawer.validTypes) {\n      if (this.getShapeDrawer(validType)) {\n        continue;\n      }\n      this.shapeDrawers.set(validType, drawer);\n    }\n    await this.refresh(refresh);\n  }\n  checkVersion(pluginVersion) {\n    if (this.version === pluginVersion) {\n      return;\n    }\n    throw new Error(`The tsParticles version is different from the loaded plugins version. Engine version: ${this.version}. Plugin version: ${pluginVersion}`);\n  }\n  clearPlugins(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this.items;\n  }\n  domItem(index) {\n    return this.item(index);\n  }\n  async getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      if (plugin.needsPlugin(container.actualOptions)) {\n        res.set(plugin.id, await plugin.getPlugin(container));\n      }\n    }\n    return res;\n  }\n  getEasing(name) {\n    return this.easingFunctions.get(name) ?? (value => value);\n  }\n  getEffectDrawer(type) {\n    return this.effectDrawers.get(type);\n  }\n  async getInteractors(container, force = false) {\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  async getMovers(container, force = false) {\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.shapeDrawers.get(type);\n  }\n  getSupportedEffects() {\n    return this.effectDrawers.keys();\n  }\n  getSupportedShapes() {\n    return this.shapeDrawers.keys();\n  }\n  async getUpdaters(container, force = false) {\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  item(index) {\n    const {\n        items\n      } = this,\n      item = items[index];\n    if (!item || item.destroyed) {\n      items.splice(index, removeDeleteCount);\n      return;\n    }\n    return item;\n  }\n  async load(params) {\n    const id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * loadRandomFactor)}`,\n      {\n        index,\n        url\n      } = params,\n      options = url ? await getDataFromUrl({\n        fallback: params.options,\n        url,\n        index\n      }) : params.options;\n    const currentOptions = itemFromSingleOrMultiple(options, index),\n      {\n        items\n      } = this,\n      oldIndex = items.findIndex(v => v.id.description === id),\n      newItem = new Container(this, id, currentOptions);\n    if (oldIndex >= loadMinIndex) {\n      const old = this.item(oldIndex),\n        deleteCount = old ? one : none;\n      if (old && !old.destroyed) {\n        old.destroy(false);\n      }\n      items.splice(oldIndex, deleteCount, newItem);\n    } else {\n      items.push(newItem);\n    }\n    const domContainer = getDomContainer(id, params.element),\n      canvasEl = getCanvasFromContainer(domContainer);\n    newItem.canvas.loadCanvas(canvasEl);\n    await newItem.start();\n    return newItem;\n  }\n  loadOptions(options, sourceOptions) {\n    this.plugins.forEach(plugin => plugin.loadOptions?.(options, sourceOptions));\n  }\n  loadParticlesOptions(container, options, ...sourceOptions) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    updaters.forEach(updater => updater.loadOptions?.(options, ...sourceOptions));\n  }\n  async refresh(refresh = true) {\n    if (!refresh) {\n      return;\n    }\n    await Promise.all(this.items.map(t => t.refresh()));\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  setOnClickHandler(callback) {\n    const {\n      items\n    } = this;\n    if (!items.length) {\n      throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n    }\n    items.forEach(item => item.addClickHandler(callback));\n  }\n}","map":{"version":3,"names":["canvasFirstIndex","canvasTag","errorPrefix","generatedAttribute","generatedFalse","generatedTrue","loadMinIndex","loadRandomFactor","none","one","removeDeleteCount","executeOnSingleOrMultiple","getLogger","itemFromSingleOrMultiple","Container","EventDispatcher","EventType","getRandom","getItemsFromInitializer","container","map","initializers","force","res","get","Promise","all","values","t","set","getDataFromUrl","data","url","index","fallback","response","fetch","ok","json","error","status","getCanvasFromContainer","domContainer","canvasEl","HTMLCanvasElement","tagName","toLowerCase","dataset","existingCanvases","getElementsByTagName","length","document","createElement","appendChild","fullPercent","style","width","height","getDomContainer","id","source","getElementById","body","append","Engine","constructor","_configs","Map","_domArray","_eventDispatcher","_initialized","plugins","colorManagers","easingFunctions","_initializers","interactors","movers","updaters","presets","effectDrawers","shapeDrawers","pathGenerators","configs","name","config","items","version","addColorManager","manager","refresh","key","addConfig","dispatchEvent","configAdded","addEasing","easing","getEasing","addEffect","effect","drawer","type","getEffectDrawer","addEventListener","listener","addInteractor","interactorInitializer","addMover","moverInitializer","addParticleUpdater","updaterInitializer","addPathGenerator","generator","getPathGenerator","addPlugin","plugin","getPlugin","push","addPreset","preset","options","override","getPreset","addShape","validType","validTypes","getShapeDrawer","checkVersion","pluginVersion","Error","clearPlugins","delete","args","dom","domItem","item","getAvailablePlugins","needsPlugin","actualOptions","value","getInteractors","getMovers","find","getSupportedEffects","keys","getSupportedShapes","getUpdaters","init","destroyed","splice","load","params","element","Math","floor","currentOptions","oldIndex","findIndex","v","description","newItem","old","deleteCount","destroy","canvas","loadCanvas","start","loadOptions","sourceOptions","forEach","loadParticlesOptions","updater","removeEventListener","setOnClickHandler","callback","addClickHandler"],"sources":["D:/UNIMART-OVERSEAS/unimart/node_modules/@tsparticles/engine/browser/Core/Engine.js"],"sourcesContent":["import { canvasFirstIndex, canvasTag, errorPrefix, generatedAttribute, generatedFalse, generatedTrue, loadMinIndex, loadRandomFactor, none, one, removeDeleteCount, } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { EventType } from \"../Enums/Types/EventType.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nasync function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = await Promise.all([...initializers.values()].map(t => t(container)));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return (await response.json());\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nconst getCanvasFromContainer = (domContainer) => {\n    let canvasEl;\n    if (domContainer instanceof HTMLCanvasElement || domContainer.tagName.toLowerCase() === canvasTag) {\n        canvasEl = domContainer;\n        if (!canvasEl.dataset[generatedAttribute]) {\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n    }\n    else {\n        const existingCanvases = domContainer.getElementsByTagName(canvasTag);\n        if (existingCanvases.length) {\n            canvasEl = existingCanvases[canvasFirstIndex];\n            canvasEl.dataset[generatedAttribute] = generatedFalse;\n        }\n        else {\n            canvasEl = document.createElement(canvasTag);\n            canvasEl.dataset[generatedAttribute] = generatedTrue;\n            domContainer.appendChild(canvasEl);\n        }\n    }\n    const fullPercent = \"100%\";\n    if (!canvasEl.style.width) {\n        canvasEl.style.width = fullPercent;\n    }\n    if (!canvasEl.style.height) {\n        canvasEl.style.height = fullPercent;\n    }\n    return canvasEl;\n}, getDomContainer = (id, source) => {\n    let domContainer = source ?? document.getElementById(id);\n    if (domContainer) {\n        return domContainer;\n    }\n    domContainer = document.createElement(\"div\");\n    domContainer.id = id;\n    domContainer.dataset[generatedAttribute] = generatedTrue;\n    document.body.append(domContainer);\n    return domContainer;\n};\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this.colorManagers = new Map();\n        this.easingFunctions = new Map();\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get items() {\n        return this._domArray;\n    }\n    get version() {\n        return \"3.8.1\";\n    }\n    async addColorManager(manager, refresh = true) {\n        this.colorManagers.set(manager.key, manager);\n        await this.refresh(refresh);\n    }\n    addConfig(config) {\n        const key = config.key ?? config.name ?? \"default\";\n        this._configs.set(key, config);\n        this._eventDispatcher.dispatchEvent(EventType.configAdded, { data: { name: key, config } });\n    }\n    async addEasing(name, easing, refresh = true) {\n        if (this.getEasing(name)) {\n            return;\n        }\n        this.easingFunctions.set(name, easing);\n        await this.refresh(refresh);\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, type => {\n            if (!this.getEffectDrawer(type)) {\n                this.effectDrawers.set(type, drawer);\n            }\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        if (!this.getPathGenerator(name)) {\n            this.pathGenerators.set(name, generator);\n        }\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        if (override || !this.getPreset(preset)) {\n            this.presets.set(preset, options);\n        }\n        await this.refresh(refresh);\n    }\n    async addShape(drawer, refresh = true) {\n        for (const validType of drawer.validTypes) {\n            if (this.getShapeDrawer(validType)) {\n                continue;\n            }\n            this.shapeDrawers.set(validType, drawer);\n        }\n        await this.refresh(refresh);\n    }\n    checkVersion(pluginVersion) {\n        if (this.version === pluginVersion) {\n            return;\n        }\n        throw new Error(`The tsParticles version is different from the loaded plugins version. Engine version: ${this.version}. Plugin version: ${pluginVersion}`);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this.items;\n    }\n    domItem(index) {\n        return this.item(index);\n    }\n    async getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (plugin.needsPlugin(container.actualOptions)) {\n                res.set(plugin.id, await plugin.getPlugin(container));\n            }\n        }\n        return res;\n    }\n    getEasing(name) {\n        return this.easingFunctions.get(name) ?? ((value) => value);\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    async getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    async getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find(t => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    async getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    item(index) {\n        const { items } = this, item = items[index];\n        if (!item || item.destroyed) {\n            items.splice(index, removeDeleteCount);\n            return;\n        }\n        return item;\n    }\n    async load(params) {\n        const id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * loadRandomFactor)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        const currentOptions = itemFromSingleOrMultiple(options, index), { items } = this, oldIndex = items.findIndex(v => v.id.description === id), newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= loadMinIndex) {\n            const old = this.item(oldIndex), deleteCount = old ? one : none;\n            if (old && !old.destroyed) {\n                old.destroy(false);\n            }\n            items.splice(oldIndex, deleteCount, newItem);\n        }\n        else {\n            items.push(newItem);\n        }\n        const domContainer = getDomContainer(id, params.element), canvasEl = getCanvasFromContainer(domContainer);\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        this.plugins.forEach(plugin => plugin.loadOptions?.(options, sourceOptions));\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        updaters.forEach(updater => updater.loadOptions?.(options, ...sourceOptions));\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        await Promise.all(this.items.map(t => t.refresh()));\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const { items } = this;\n        if (!items.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        items.forEach(item => item.addClickHandler(callback));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}